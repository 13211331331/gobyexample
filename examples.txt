Hello World
Values
Variables
Constants
For
If/Else
Switch
Arrays
Slices
Maps
Range
Functions
Multiple Return Values
Variadic Functions
闭包 Closures
递归 Recursion
指针 Pointers
Structs
Methods
Interfaces
Errors
廉价的thread  Goroutines
Channels
缓冲 Channel Buffering
同步 Channel Synchronization
Channel Directions
Select
Timeouts
无阻塞通讯 Non-Blocking Channel Operations
Closing Channels
Range over Channels
Timers
Tickers
Worker Pools
Rate Limiting
计数器 Atomic Counters

Mutexes
Stateful Goroutines
Sorting
Sorting by Functions
Panic
Defer
Collection Functions
String Functions
String Formatting
Regular Expressions
JSON
Time
Epoch
Time Formatting / Parsing
Random Numbers
Number Parsing
URL Parsing
SHA1 Hashes
Base64 Encoding
Reading Files
Writing Files
Line Filters
Command-Line Arguments
Command-Line Flags
Environment Variables
Spawning Processes
Exec'ing Processes
Signals
Exit


 布尔类型：bool。
 整型：int8、byte、int16、int、uint、uintptr等。
 浮点类型：float32、float64。
 复数类型：complex64、complex128。
 字符串：string。
 字符类型：rune。
 错误类型：error。
此外，Go语言也支持以下这些复合类型：
 指针（pointer）
 数组（array）
 切片（slice）
 字典（map）
 通道（chan）
 结构体（struct）
 接口（interface）


Go语言中的布尔类型与其他语言基本一致，关键字也为bool，可赋值为预定义的true和
false示例代码如下：
var v1 bool
v1 = true
v2 := (1 == 2) // v2也会被推导为bool类型

int8 1 128 ~ 127
uint8（即byte） 1 0 ~ 255
int16 2 32 768 ~ 32 767
uint16 2 0 ~ 65 535
int32 4 2 147 483 648 ~ 2 147 483 647
uint32 4 0 ~ 4 294 967 295
int64 8 9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807
uint64 8 0 ~ 18 446 744 073 709 551 615
int 平台相关 平台相关
uint 平台相关 平台相关
uintptr 同指针 在32位平台下为4字节，64位平台下为8字节


因此需要先牢记这样的规则：小写字母开头的函数只在本包内可见，大写字母开头的函数才
能被其他包使用。
这个规则也适用于类型和变量的可见性。

defer func() {
// 做你复杂的清理工作
} ()
另外，一个函数中可以存在多个defer语句，因此需要注意的是，defer语句的调用是遵照
先进后出的原则，即最后一个defer语句将最先被执行。只不过，当你需要为defer语句到底哪
个先执行这种细节而烦恼的时候，说明你的代码架构可能需要调整一下了。

初始化类
rect1 := new(Rect)
rect2 := &Rect{}
rect3 := &Rect{0, 0, 100, 200}
rect4 := &Rect{width: 100, height: 200}

在Go语言中没有构造函数的概念，对象的创建通常交由一个全局的创建函数来完成，以
NewXXX来命名，表示“构造函数”：
func NewRect(x, y, width, height float64) *Rect {
return &Rect{x, y, width, height}
}